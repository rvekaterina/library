// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: api/library/library.proto

package database_hw

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Library_AddBook_FullMethodName          = "/library.Library/AddBook"
	Library_UpdateBook_FullMethodName       = "/library.Library/UpdateBook"
	Library_GetBookInfo_FullMethodName      = "/library.Library/GetBookInfo"
	Library_RegisterAuthor_FullMethodName   = "/library.Library/RegisterAuthor"
	Library_ChangeAuthorInfo_FullMethodName = "/library.Library/ChangeAuthorInfo"
	Library_GetAuthorInfo_FullMethodName    = "/library.Library/GetAuthorInfo"
	Library_GetAuthorBooks_FullMethodName   = "/library.Library/GetAuthorBooks"
)

// LibraryClient is the client API for Library service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LibraryClient interface {
	AddBook(ctx context.Context, in *AddBookRequest, opts ...grpc.CallOption) (*AddBookResponse, error)
	UpdateBook(ctx context.Context, in *UpdateBookRequest, opts ...grpc.CallOption) (*UpdateBookResponse, error)
	GetBookInfo(ctx context.Context, in *GetBookInfoRequest, opts ...grpc.CallOption) (*GetBookInfoResponse, error)
	RegisterAuthor(ctx context.Context, in *RegisterAuthorRequest, opts ...grpc.CallOption) (*RegisterAuthorResponse, error)
	ChangeAuthorInfo(ctx context.Context, in *ChangeAuthorInfoRequest, opts ...grpc.CallOption) (*ChangeAuthorInfoResponse, error)
	GetAuthorInfo(ctx context.Context, in *GetAuthorInfoRequest, opts ...grpc.CallOption) (*GetAuthorInfoResponse, error)
	GetAuthorBooks(ctx context.Context, in *GetAuthorBooksRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Book], error)
}

type libraryClient struct {
	cc grpc.ClientConnInterface
}

func NewLibraryClient(cc grpc.ClientConnInterface) LibraryClient {
	return &libraryClient{cc}
}

func (c *libraryClient) AddBook(ctx context.Context, in *AddBookRequest, opts ...grpc.CallOption) (*AddBookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddBookResponse)
	err := c.cc.Invoke(ctx, Library_AddBook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libraryClient) UpdateBook(ctx context.Context, in *UpdateBookRequest, opts ...grpc.CallOption) (*UpdateBookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateBookResponse)
	err := c.cc.Invoke(ctx, Library_UpdateBook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libraryClient) GetBookInfo(ctx context.Context, in *GetBookInfoRequest, opts ...grpc.CallOption) (*GetBookInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBookInfoResponse)
	err := c.cc.Invoke(ctx, Library_GetBookInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libraryClient) RegisterAuthor(ctx context.Context, in *RegisterAuthorRequest, opts ...grpc.CallOption) (*RegisterAuthorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterAuthorResponse)
	err := c.cc.Invoke(ctx, Library_RegisterAuthor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libraryClient) ChangeAuthorInfo(ctx context.Context, in *ChangeAuthorInfoRequest, opts ...grpc.CallOption) (*ChangeAuthorInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangeAuthorInfoResponse)
	err := c.cc.Invoke(ctx, Library_ChangeAuthorInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libraryClient) GetAuthorInfo(ctx context.Context, in *GetAuthorInfoRequest, opts ...grpc.CallOption) (*GetAuthorInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAuthorInfoResponse)
	err := c.cc.Invoke(ctx, Library_GetAuthorInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libraryClient) GetAuthorBooks(ctx context.Context, in *GetAuthorBooksRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Book], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Library_ServiceDesc.Streams[0], Library_GetAuthorBooks_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetAuthorBooksRequest, Book]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Library_GetAuthorBooksClient = grpc.ServerStreamingClient[Book]

// LibraryServer is the server API for Library service.
// All implementations should embed UnimplementedLibraryServer
// for forward compatibility.
type LibraryServer interface {
	AddBook(context.Context, *AddBookRequest) (*AddBookResponse, error)
	UpdateBook(context.Context, *UpdateBookRequest) (*UpdateBookResponse, error)
	GetBookInfo(context.Context, *GetBookInfoRequest) (*GetBookInfoResponse, error)
	RegisterAuthor(context.Context, *RegisterAuthorRequest) (*RegisterAuthorResponse, error)
	ChangeAuthorInfo(context.Context, *ChangeAuthorInfoRequest) (*ChangeAuthorInfoResponse, error)
	GetAuthorInfo(context.Context, *GetAuthorInfoRequest) (*GetAuthorInfoResponse, error)
	GetAuthorBooks(*GetAuthorBooksRequest, grpc.ServerStreamingServer[Book]) error
}

// UnimplementedLibraryServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLibraryServer struct{}

func (UnimplementedLibraryServer) AddBook(context.Context, *AddBookRequest) (*AddBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBook not implemented")
}
func (UnimplementedLibraryServer) UpdateBook(context.Context, *UpdateBookRequest) (*UpdateBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBook not implemented")
}
func (UnimplementedLibraryServer) GetBookInfo(context.Context, *GetBookInfoRequest) (*GetBookInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookInfo not implemented")
}
func (UnimplementedLibraryServer) RegisterAuthor(context.Context, *RegisterAuthorRequest) (*RegisterAuthorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAuthor not implemented")
}
func (UnimplementedLibraryServer) ChangeAuthorInfo(context.Context, *ChangeAuthorInfoRequest) (*ChangeAuthorInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeAuthorInfo not implemented")
}
func (UnimplementedLibraryServer) GetAuthorInfo(context.Context, *GetAuthorInfoRequest) (*GetAuthorInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthorInfo not implemented")
}
func (UnimplementedLibraryServer) GetAuthorBooks(*GetAuthorBooksRequest, grpc.ServerStreamingServer[Book]) error {
	return status.Errorf(codes.Unimplemented, "method GetAuthorBooks not implemented")
}
func (UnimplementedLibraryServer) testEmbeddedByValue() {}

// UnsafeLibraryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LibraryServer will
// result in compilation errors.
type UnsafeLibraryServer interface {
	mustEmbedUnimplementedLibraryServer()
}

func RegisterLibraryServer(s grpc.ServiceRegistrar, srv LibraryServer) {
	// If the following call pancis, it indicates UnimplementedLibraryServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Library_ServiceDesc, srv)
}

func _Library_AddBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibraryServer).AddBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Library_AddBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServer).AddBook(ctx, req.(*AddBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Library_UpdateBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibraryServer).UpdateBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Library_UpdateBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServer).UpdateBook(ctx, req.(*UpdateBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Library_GetBookInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBookInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibraryServer).GetBookInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Library_GetBookInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServer).GetBookInfo(ctx, req.(*GetBookInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Library_RegisterAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterAuthorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibraryServer).RegisterAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Library_RegisterAuthor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServer).RegisterAuthor(ctx, req.(*RegisterAuthorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Library_ChangeAuthorInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeAuthorInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibraryServer).ChangeAuthorInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Library_ChangeAuthorInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServer).ChangeAuthorInfo(ctx, req.(*ChangeAuthorInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Library_GetAuthorInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthorInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibraryServer).GetAuthorInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Library_GetAuthorInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServer).GetAuthorInfo(ctx, req.(*GetAuthorInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Library_GetAuthorBooks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAuthorBooksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LibraryServer).GetAuthorBooks(m, &grpc.GenericServerStream[GetAuthorBooksRequest, Book]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Library_GetAuthorBooksServer = grpc.ServerStreamingServer[Book]

// Library_ServiceDesc is the grpc.ServiceDesc for Library service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Library_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "library.Library",
	HandlerType: (*LibraryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddBook",
			Handler:    _Library_AddBook_Handler,
		},
		{
			MethodName: "UpdateBook",
			Handler:    _Library_UpdateBook_Handler,
		},
		{
			MethodName: "GetBookInfo",
			Handler:    _Library_GetBookInfo_Handler,
		},
		{
			MethodName: "RegisterAuthor",
			Handler:    _Library_RegisterAuthor_Handler,
		},
		{
			MethodName: "ChangeAuthorInfo",
			Handler:    _Library_ChangeAuthorInfo_Handler,
		},
		{
			MethodName: "GetAuthorInfo",
			Handler:    _Library_GetAuthorInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAuthorBooks",
			Handler:       _Library_GetAuthorBooks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/library/library.proto",
}
